# .scene file specification by Felipe Gomez-Frittelli (fgomezfr@outlook.com)
# A simple text format for static 3D scenes for graphics projects

///////////////////////////////////////////////////////////////////////////////
//                          FILE FORMAT                                      //
///////////////////////////////////////////////////////////////////////////////

Lines beginning with a hash character (#) are comments. 

Each other line defines a single object or property of an object in the scene.
Whitespace may be usedas a separator (see below) but is otherwise ignored, 
except for newlines (\n).

An object in the scene is declared by one of the accepted type names on its
own line, followed by an opening brace ({) on its own line, then the list of
properties for that object, and finally a closing brace (}), all on separate
lines.

Each property is defined by a string name, followed by a whitespace-separated
list of fields. Fields may be numeric (decimal integer or floats) or strings 
surrounded by quotes ("). When strings indicating file names are used, files
should be specified with relative paths.

Properties may be listed in any order. Duplicate property names override
previous values - the last value in line-order is used for that name.

All properties are OPTIONAL. Any reasonable defaults may be used for missing
properties.

///////////////////////////////////////////////////////////////////////////////
//                      SUPPORTED OBJECTS                                    //
///////////////////////////////////////////////////////////////////////////////

Currently, scenes can include three types of objects:

model - A static, 3D model potentially composed of multiple meshes.

  Properties (name: <value-type> value)

    file: <string> Path to a model file defining meshes and materials.
                   Currently only .obj files are supported. These may include
                   any number of .objmtl files and textures recursively.

    position: <float float float> The world-space position of the model.

    orientation: <float float float> The world orientation, as pitch-yaw-roll 
                             (rotation around x, y, and z) in degrees.

    scale: <float float float> Scaling to be applied to the object, x-y-z


sunlight - A static directional light applied to the entire scene.

  Properties (name: <value-type> value)

    direction: <float float float> The direction of the light. Does not need
                                   to be a unit vector.

    color: <float float float> The RGB color of the light; values in [0,1].

    ambient: <float> The ambient light intensity (scales the light color for
                     applying ambient light to the scene). A value of 0
                     indicates the light does not apply ambient light.


spotlight - A static, cone-shaped spot light with angular falloff.

  Properties (name: <value-type> value)

    position: <float float float> World position of the light source.

    direction: <float float float> Facing direction of the light; defines
                                   the axis of the cone along with position.

    color: <float float float> Light intensity (RGB in [0,1])

    exponent: <float> Exponent used for cosine-angle falloff, as in glLight.

    angle: <float> Angle of the light cone in degrees (as in GL_SPOT_CUTOFF).

    length: <float> Max length, or height, of the cone to apply lighting.

    attenuation: <float float float> Constant, linear, and quadratic light
                                     attenuation factors.

pointlight - An animatable point light source.

  Properties (name: <value-type> value)

    position: <float float float> World position of the light source.

    color: <float float float> Light intensity (RGB in [0,1])

    velocity: <float> Parameter for driving animation.

    attenuation: <float float float> Constant, linear, and quadratic light
                                     attenuation factors.


///////////////////////////////////////////////////////////////////////////////
//                              EXTENSIONS                                   //
///////////////////////////////////////////////////////////////////////////////

Scene files may include additional objects and / or properties not defined in
this format specification. As always, properties should be defined on separate
lines, and objects should be labeled with a preceding type name and enclosing
braces ({}), all on separate lines. This allows unrecognized properties or
objects to be skipped by the parser, if a fatal error is not desireable.